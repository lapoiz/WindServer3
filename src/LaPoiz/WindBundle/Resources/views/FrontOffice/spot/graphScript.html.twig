{% macro script(spot) %}

    <script>
    /**
     * Constructeur Meteogram
     * @param jsonGraph
     * @param container
     * @constructor
     */
    function Meteogram(jsonGraph, container) {
        this.windDirections = [];
        this.windDirectionNames = [];

        this.windGuru = [];
        this.windGuruPro = [];
        this.windFinder = [];
        this.meteoFrance = [];
        this.precipitation = [];

        this.meteo = [];
        this.maree = [];
        this.updateWind = [];

        this.dateFirst = 5000000000000; // Origine du graph - dans tres tres longtemps
        this.dateLast = 50000000; // Fin du graph - il y a longtemps

        // Initialize
        this.json = jsonGraph;
        this.container = container;


        // Run
        this.parseYrData();
    }



    /**
     * Parcours les éléments du JSon pour associer au différents éléments les valeurs
     * ex boucle sur la partie forecast du Json
     */
    Meteogram.prototype.parseYrData = function () {
        var meteogram = this,
                json = this.json,
                pointStart;


        if (!json || !json.forecast) {
            //angular.element(document.querySelector( '#loading')).html('<i class="fa fa-frown-o"></i> Failed loading data, please try again later');
            if (!json)
                console.warn("Meteogram: Failed loading data - JSon empty");
            else
                console.warn("Meteogram: Failed loading data - JSon without forecast inside");
            //console.debug("json: "+json);
            //console.debug("Json: "+JSON.stringify(json));
            return;
        };

        //angular.forEach(json.forecast, function (i, time) {
        $.each(json.forecast, function (i, time) {
            var datePrev=time.date;

            meteogram.dateFirst = meteogram.dateFirst>datePrev?datePrev:meteogram.dateFirst;
            meteogram.dateLast = meteogram.dateLast<datePrev?datePrev:meteogram.dateLast;

            if (typeof(time.WindFinder) != 'undefined') {
                meteogram.windFinder.push({
                    x: datePrev,
                    y: parseFloat(time.WindFinder),
                    orientation: time.orientation.nom
                });
            }

            if (typeof(time.maree) != 'undefined') {
                meteogram.maree.push({
                    x: datePrev,
                    y: parseFloat(time.maree),
                    orientation: '?'
                });
            }

            if (typeof(time.MeteoFrance) != 'undefined') {
                meteogram.meteoFrance.push({
                    x: datePrev,
                    y: parseFloat(time.MeteoFrance),
                    orientation: (time.orientation!=null?time.orientation.nom:"")
                });
            }

            if (typeof(time.Windguru) != 'undefined') {
                meteogram.windGuru.push({
                    x: datePrev,
                    y: parseFloat(time.Windguru)
                });
            }

            if (typeof(time.WindguruPro) != 'undefined') {
                meteogram.windGuruPro.push({
                    x: datePrev,
                    y: parseFloat(time.WindguruPro)
                });
            }

            if (typeof(time.precipitation) != 'undefined') {
                meteogram.precipitation.push({
                    x: datePrev,
                    y: parseFloat(time.precipitation)
                });
            }

            if (typeof(time.orientation) != 'undefined'
                    && typeof(time.orientation.nom) != 'undefined'
                    && time.orientation.nom != "") {
                    meteogram.windDirections.push({
                        date: datePrev,
                        orientation: parseFloat(time.orientation.deg),
                        //state: time.orientation.state,
                        name: time.orientation.nom
                    });
            }

            if (typeof(time.meteo) != 'undefined') {
                meteogram.meteo.push({
                    date: datePrev,
                    meteo: time.meteo
                });
                //meteogram.symbolNames.push(time.meteo['@attributes'].name);
            }
        });
        //console.debug("meteogram.dateFirst: "+meteogram.dateFirst+"        meteogram.dateLast: "+meteogram.dateLast);
        // Create the chart when the data is loaded
        this.createChart();
    };

    /**
     * Une fois parseYrData est executé - cad une fois les données du json chargé
     */
    Meteogram.prototype.createChart = function () {
        var meteogram = this;
        //console.log("createChart");
        this.chart = new Highcharts.Chart(this.getChartOptions(), function (chart) {
            //console.log("createChart->onChartLoad");
            meteogram.onChartLoad(chart);
        });
    };

    /**
     * options du graph définissant de façons statique les paramétre du graph (titre, abcisses, légendes...)
     */
    Meteogram.prototype.getChartOptions = function () {
        var meteogram = this;

        return {
            global: {
                useUTC: false
            },
            colors: ['#E3001E', 'red'],
            chart: {
                renderTo: this.container,
                marginBottom: 70,
                marginRight: 40,
                marginLeft: 50,
                marginTop: 50,
                plotBorderWidth: 1,
                zoomType: 'xy'
            },

            title: {
                text: "Prévisions pour {{ spot.nom }}"
                //align: 'left'
            },

            credits: {
                text:"LaPoiz",
                enabled: true
            },

            xAxis: [{ // Bottom X axis
                id: "xAxis",
                type: 'datetime',
                gridLineWidth: 1,
                gridLineColor: (Highcharts.theme && Highcharts.theme.background2) || '#F0F0F0',
                tickInterval: 6 * 36e5, // 6 hours
                //minorTickInterval: 2 * 36e5, // 2 hours
                startOnTick: false,
                endOnTick: false,
                minPadding: 0,
                maxPadding: 0,
                offset: 30,
                labels: {
                    format: '{value:%H}'
                }
            }, { // Top X axis
                linkedTo: 0,
                type: 'datetime',
                tickInterval: 24 * 3600 * 1000,
                labels: {
                    format: '{value:<span style="font-size: 12px; font-weight: bold">%a</span> %e %b}',
                    align: 'left',
                    x: 10,
                    y: -5
                },
                opposite: true,
                tickLength: 20,
                showLastLabel: false,
                gridLineWidth: 1
            }],

            yAxis: [
                { // Vent axis
                    title: {
                        text: null
                    },
                    labels: {
                        format: '{value} Nd',
                        style: {
                            fontSize: '10px'
                        },
                        x: -3
                    },
                    plotLines: [{ // zero plane
                        value: 0,
                        color: '#BBBBBB',
                        width: 1,
                        zIndex: 2
                    }],
                    gridLineColor: (Highcharts.theme && Highcharts.theme.background2) || '#F0F0F0',

                    plotBands: [{ // Light air
                        from: 0,
                        to: 12,
                        color: 'rgba(68, 170, 213, 0.1)',
                        zIndex: 1
                    }]
                }, { // Marée
                    allowDecimals: false,

                    title: { // Title on top of axis
                        text: 'Marée',
                        offset: 0,
                        align: 'low',
                        rotation: 90,
                        style: {
                            fontSize: '10px',
                            color: Highcharts.getOptions().colors[0]
                        },
                        textAlign: 'left',
                        x: 5,
                        y: -34
                    },
                    max: 30,
                    min: 0,
                    labels: {
                        enabled: false
                    },
                    gridLineWidth: 0,
                    opposite: true,
                    showLastLabel: false
                }, { // Précipitation
                    allowDecimals: false,
                    title: { // Title on top of axis
                        text: 'Précipitation',
                        offset: 0,
                        align: 'low',
                        rotation: 90,
                        style: {
                            fontSize: '10px',
                            color: 'blue'
                        },
                        textAlign: 'left',
                        x: 10,
                        y: -34
                    },
                    max: 50,
                    min: 0,
                    labels: {
                        enabled: false
                    },
                    gridLineWidth: 0,
                    opposite: true,
                    showLastLabel: false
                }
            ],

            legend: {
//                useHTML: true,
//                labelFormatter: function() { return this.name + (this.name!='Marée'?' <span style="font-size: xx-small; font-weight: lighter">(update 14h00)</span>':'') },
                y: 20
            },

            tooltip: {
                formatter: function() {
                    return  ' ' +
                            Highcharts.dateFormat('%H:%M - %a %d %b', new Date(this.x)) + '<br/>'+
                            '<b>' + this.series.name +'</b>:' + this.y + '<br/>'+
                            'orientation:'+(this.point.orientation);
                }
            },
            plotOptions: {
                areaspline: {
                    fillOpacity: 0.8
                }
            },

            series: [{
                name: 'WindGuru',
                yAxis: 0,
                data: this.windGuru,
                type: 'spline',
                tooltip: {
                    valueSuffix: ' Nd'
                },
                zIndex: 0,
                marker: {
                    enabled: false
                },
                color: '#FF8000',
                negativeColor: '#808080'
            },{
                name: 'WindGuruPro',
                yAxis: 0,
                data: this.windGuruPro,
                type: 'spline',
                zIndex: 1,
                marker: {
                    enabled: false
                },
                color: '#FF0000',
                negativeColor: '#48AFE8'
            },{
                name: 'Météo France',
                yAxis: 0,
                data: this.meteoFrance,
                type: 'spline',
                zIndex: 1,
                marker: {
                    enabled: false
                },
                color: '#D3D3D3',
                negativeColor: '#48AFE8'
            },{
                name: 'WindFinder',
                yAxis: 0,
                data: this.windFinder,
                type: 'spline',
                zIndex: 1,
                marker: {
                    enabled: false
                },
                color: '#8FBC8F',
                negativeColor: '#48AFE8'
            }, {
                name: 'Marée',
                yAxis: 1,
                color: Highcharts.getOptions().colors[0],
                data: this.maree,
                type: 'areaspline',
                marker: {
                    enabled: false
                }
            }, {
                name: 'Precipitation',
                yAxis: 2,
                data: this.precipitation,
                type: 'column',
                marker: {
                    enabled: false
                },
                color: 'blue'
            }],
            lang: {
                weekdays: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam']
            }
        }
    };



    /**
     * Post-process: Dessine les éléments additif
     *
     */
    Meteogram.prototype.onChartLoad = function (chart) {
        this.drawWeatherSymbols(chart);
        this.drawWindArrows(chart);
    };


    // Fleche dorientation du vent

    /**
     * Dessin de la fléche de l'orientation du vent
     */
    Meteogram.prototype.drawWindArrows = function (chart) {
        //console.log("drawWindArrows chart.marginLeft:"+chart.marginLeft);

        var meteogram = this;
        var shiftLeft = (chart.marginLeft?chart.marginLeft:50);
        var shiftRight = (chart.marginRight?chart.marginRight:0);
        var graphWidth = chart.chartWidth-shiftLeft-shiftRight;
        //console.log("drawWindArrows shiftLeft:"+shiftLeft+"  shiftRight "+shiftRight);
        var yArrow = chart.chartHeight - 55;

        var tabOrientationState = [];
        {% for windOrientation in spot.windOrientation %}
            tabOrientationState["{{ windOrientation.orientation }}"]="{{ windOrientation.state?windOrientation.state:"?" }}";
            //console.log("{{ windOrientation.orientation }}->{{ windOrientation.state?windOrientation.state:"?" }}");
        {% endfor %}


        $.each(chart.series[0].data, function (i, point) {
            var sprite, arrow, x, y;
            //x = point.plotX + chart.plotLeft + 7;
            //y = yArrow;
            //console.log("point.plotX:"+point.plotX+" chart.plotLeft:" + chart.plotLeft );
            //console.log("Meteogram - drawWindArrows i:"+i+"    orientation: "+meteogram.windDirections[i].orientation +"    x: "+x+"  date:"+meteogram.windDirections[i].date);

            if (meteogram.windDirections[i] != null && meteogram.windDirections[i].name != null) {
                arrow = chart.renderer.path(
                                meteogram.windArrow(meteogram.windDirections[i].name)
                        ).attr({
                            rotation: parseInt(meteogram.windDirections[i].orientation, 10),
                            translateX: meteogram.abscisseFromDate(meteogram.windDirections[i].date, graphWidth,shiftLeft),
                            translateY: yArrow
                        });

                arrow.attr({
                    stroke: meteogram.colorWindArrowState(meteogram.windDirections[i].name, tabOrientationState) || 'black',// couleur
                    'stroke-width': 1.5,
                    zIndex: 5
                }).add();
            }
        });
    };

    /**
     * Symbole du vent en svg
     */
    Meteogram.prototype.windArrow = function (name) {
        var path;

        // The stem and the arrow head
        path = [
            'M', 0, 7, // base of arrow
            'L', -1.5, 7,
            0, 10,
            1.5, 7,
            0, 7,
            0, -10 // top
        ];

        return path;
    };

    /**
     * Couleur de la fleche en fonction de l'état (good, warning, bad)
     */
    Meteogram.prototype.colorWindArrowState = function (name, tabOrientationState) {
        var color = null;
        var state = getStateOfWindOrientation(name, tabOrientationState);

        switch (state) {
            case "OK":
                color="green";
                break;
            case "warn":
                color="orange";
                break;
            case "KO":
                color="red";
                break;
        }
        //console.log(name+"->"+color);
        return color;
    };

    /**
     * Position x des flêches pour l'orientation du vent
     * @param date
     * @param graphWidth
     * @param shiftLeft
     * @returns {*}
     */
    Meteogram.prototype.abscisseFromDate = function (date,graphWidth,shiftLeft) {
        //console.log("date : "+date+"   abscisseFromDate - this.dateFirst:"+this.dateFirst+"  -  this.dateLast: "+this.dateLast+"   graphWidth : "+graphWidth+"  shiftLeft:"+shiftLeft+" -> "+(((date-this.dateFirst)* graphWidth)/(this.dateLast-this.dateFirst))+shiftLeft);
        //console.log("extrem: "+this.xaxis[0].getExtremes().max);
        return ((date-this.dateFirst)* graphWidth)/(this.dateLast-this.dateFirst)+shiftLeft;
    };



    // Dessins météo

    /**
     * Draw the weather symbols on top of the temperature series. The symbols are sprites of a single
     * file, defined in the getSymbolSprites function above.
     */
    Meteogram.prototype.drawWeatherSymbols = function (chart) {
        var meteogram = this;
        var symbolSprites = this.getSymbolSprites(30);
        var shiftLeft = (chart.marginLeft?chart.marginLeft:50);
        var shiftRight = (chart.marginRight?chart.marginRight:0);
        var graphWidth = chart.chartWidth-shiftLeft-shiftRight;

        $.each(chart.series[0].data, function (i, point) {
            var sprite,
                    group;
            if (meteogram.meteo[i]) {
                sprite = symbolSprites[meteogram.meteo[i].meteo];
                //console.log("drawWeatherSymbols meteogram.meteo[i]:"+meteogram.meteo[i].meteo+"   sprite:"+sprite);
                if (sprite) {
                    // Create a group element that is positioned and clipped at 30 pixels width and height
                    group = chart.renderer.g()
                            .attr({
                                translateX: meteogram.abscisseFromDate(meteogram.meteo[i].date, graphWidth,shiftLeft) - 15,
                                translateY: 50,
                                zIndex: 5
                            })
                            .clip(chart.renderer.clipRect(0, 0, 30, 30))
                            .add();

                    // Position the image inside it at the sprite position
                    chart.renderer.image(
                                    '{{ asset('bundles/lapoizwind/images/meteogram-symbols-30px.png') }}',
                                    //'{{ asset('bundles/lapoizwind/images/') }}meteogram-symbols-30px.png',
                                    //'../images/meteogram-symbols-30px.png',
                                    -sprite.x,
                                    -sprite.y,
                                    90,
                                    570
                            )
                            .add(group);
                }
            }
        });
    };


    /**
     * return un tableau contenant les parties de l'image de img/meteogram-symbol-30px.png coresspondant
     */
    Meteogram.prototype.getSymbolSprites = function (symbolSize) {
        return {
            'en': {
                x: 0,
                y: 0
            },
            'ec': {
                x: symbolSize,
                y: 0
            },
            'c-v': {
                x: 2 * symbolSize,
                y: 0
            },
            'b': {
                x: 0,
                y: 2 * symbolSize
            },
            '02n': {
                x: symbolSize,
                y: symbolSize
            },
            '03d': {
                x: 0,
                y: 2 * symbolSize
            },
            '03n': {
                x: symbolSize,
                y: 2 * symbolSize
            },
            '17': {
                x: 2 * symbolSize,
                y: 2 * symbolSize
            },
            't-n': {
                x: 0,
                y: 3 * symbolSize
            },
            'r-a': {
                x: 0,
                y: 4 * symbolSize
            },
            'p-e': {
                x: symbolSize,
                y: 4 * symbolSize
            },
            '18': {
                x: 2 * symbolSize,
                y: 4 * symbolSize
            },
            '?': {
                x: 0,
                y: 5 * symbolSize
            },
            '06n': {
                x: symbolSize,
                y: 5 * symbolSize
            },
            '07d': {
                x: 0,
                y: 6 * symbolSize
            },
            '07n': {
                x: symbolSize,
                y: 6 * symbolSize
            },
            '08d': {
                x: 0,
                y: 7 * symbolSize
            },
            '08n': {
                x: symbolSize,
                y: 7 * symbolSize
            },
            '19': {
                x: 2 * symbolSize,
                y: 7 * symbolSize
            },
            'a': {
                x: 0,
                y: 8 * symbolSize
            },
            'p': {
                x: 0,
                y: 9 * symbolSize
            },
            '11': {
                x: 0,
                y: 10 * symbolSize
            },
            '12': {
                x: 0,
                y: 11 * symbolSize
            },
            '13': {
                x: 0,
                y: 12 * symbolSize
            },
            '14': {
                x: 0,
                y: 13 * symbolSize
            },
            '15': {
                x: 0,
                y: 14 * symbolSize
            },
            '20d': {
                x: 0,
                y: 15 * symbolSize
            },
            '20n': {
                x: symbolSize,
                y: 15 * symbolSize
            },
            '20m': {
                x: 2 * symbolSize,
                y: 15 * symbolSize
            },
            '21d': {
                x: 0,
                y: 16 * symbolSize
            },
            'a-o': {
                x: symbolSize,
                y: 16 * symbolSize
            },
            'p-o': {
                x: 2 * symbolSize,
                y: 16 * symbolSize
            },
            '22': {
                x: 0,
                y: 17 * symbolSize
            },
            '23': {
                x: 0,
                y: 18 * symbolSize
            }
        };
    };

    // End of the Meteogram protype


    /**
     *
     * @param name: 'n', 'nne' ...
     * @param tabOrientationState: ["nord":"OK", "nord-nord-est":"warn" ....
     * return the state ("OK", "warn" or "KO"
     */
    function getStateOfWindOrientation(name, tabOrientationState) {
        var nameLong = "?";
        switch (name) {
            case "n":
                nameLong = "nord";
                break;
            case "nne":
                nameLong = "nord-nord-est";
                break;
            case "ne":
                nameLong = "nord-est";
                break;
            case "ene":
                nameLong = "est-nord-est";
                break;
            case "e":
                nameLong = "est";
                break;
            case "ese":
                nameLong = "est-sud-est";
                break;
            case "se":
                nameLong = "sud-est";
                break;
            case "sse":
                nameLong = "sud-sud-est";
                break;
            case "s":
                nameLong = "sud";
                break;
            case "ssw":
                nameLong = "sud-sud-west";
                break;
            case "sw":
                nameLong = "sud-west";
                break;
            case "wsw":
                nameLong = "west-sud-west";
                break;
            case "w":
                nameLong = "west";
                break;
            case "wnw":
                nameLong = "west-nord-west";
                break;
            case "nw":
                nameLong = "nord-west";
                break;
            case "nnw":
                nameLong = "nord-nord-west";
                break;
        }
        return tabOrientationState[nameLong];
    }


    </script>
{% endmacro %}